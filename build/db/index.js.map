{"version":3,"sources":["../../src/db/index.js"],"names":["ObjectId","Contact","Photo","mongoose","constant","shortid","contactOne","_id","baseUrl","doc","findById","photo","PHOTO_URL","contactsAll","pageno","pagesize","contacts","find","sort","skip","limit","map","c","name","tel","address","count","countDocuments","totalcount","searchContact","length","Error","RegExp","index","insertContact","toHexString","c1","save","status","message","updateContact","updateOne","ok","n","deleteContact","delDoc","photo_id","substr","console","log","deleteOne","streamToBuffer","stream","Promise","resolve","reject","buffers","on","data","push","Buffer","concat","storeImageToDB","mimetype","generate","image","changePhoto","upload","startsWith","updatedDoc"],"mappings":"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","file":"index.js","sourcesContent":["import { ObjectId } from 'mongodb'\r\nimport { Contact, Photo, mongoose } from './contactdb';\r\nimport constant from '../constant';\r\nimport shortid from 'shortid';\r\n\r\nexport const contactOne = async ({ _id, baseUrl }) => {\r\n    if (typeof(_id) !== \"string\" && _id == \"\") _id = \"not passed\";\r\n    let doc = await Contact.findById(_id);\r\n    if (doc) { \r\n        doc.photo = baseUrl + constant.PHOTO_URL + doc.photo;\r\n        return doc; \r\n    }\r\n    return { _id };\r\n}\r\n\r\nexport const contactsAll = async ({ pageno, pagesize, baseUrl }) => {\r\n    if (typeof(pageno) !== \"number\" || pageno < 0) pageno = 0;\r\n    if (typeof(pagesize) !== \"number\") pagesize = 5;\r\n    let contacts;\r\n    if (pageno === 0) {\r\n        pagesize=0;\r\n        contacts = await Contact.find().sort({ _id: -1 });\r\n    } else {\r\n        contacts = await Contact.find().sort({ _id: -1 }).skip((pageno-1)*pagesize).limit(pagesize);\r\n    }\r\n    contacts = contacts.map((c)=> {\r\n        let { _id, name, tel, address, photo } = c;\r\n        return { _id, name, tel, address, photo: baseUrl + constant.PHOTO_URL + photo}\r\n    })\r\n    let count = await Contact.countDocuments();\r\n    return { pageno, pagesize, totalcount:count, contacts };\r\n}\r\n\r\nexport const searchContact = async({ name, baseUrl }) => {\r\n    if (typeof(name) !== \"string\" || name.length < 2) {\r\n        throw new Error(\"두글자 이상의 이름을 입력하세요\");\r\n    }\r\n    let contacts = await Contact.find({ name: new RegExp(name, \"i\")}).sort({name:1});\r\n    contacts = contacts.map((c,index)=> {\r\n        let { _id, name, tel, address, photo } = c;\r\n        return { _id, name, tel, address, photo: baseUrl + constant.PHOTO_URL + photo }\r\n    })\r\n    return contacts;\r\n}\r\n\r\nexport const insertContact = async ({ name, tel, address, photo }) => {\r\n    if (typeof(photo) === \"undefined\" || photo == null) {\r\n        photo = 'noimage';\r\n    }\r\n    let _id = new ObjectId().toHexString();\r\n    let c1 = new Contact({\r\n        _id, name, tel, address, photo\r\n    })\r\n    let doc = await c1.save()\r\n    return { status: \"ok\", message:\"연락처 추가 성공\", _id: doc._id };\r\n} \r\n\r\nexport const updateContact = async ({ _id, name, tel, address }) => {\r\n    if (typeof(_id) === \"undefined\") {\r\n        return { status: \"fail\", message:\"_id 필드는 반드시 전달해야 합니다.\" };\r\n    }\r\n    let doc = await Contact.updateOne({ _id: _id }, { name, tel, address })\r\n    if (doc.ok === 1 && doc.n === 1) {\r\n        return { status:\"ok\", message:\"업데이트 성공\", _id:_id };\r\n    } else {\r\n        return { status:\"fail\", message:\"업데이트 실패\" };\r\n    }\r\n}\r\n\r\nexport const deleteContact = async ({ _id }) => {\r\n    if (typeof(_id) === \"undefined\") {\r\n        return { status: \"fail\", message:\"_id 필드는 반드시 전달해야 합니다.\" };\r\n    }\r\n    let delDoc = await contactOne({ _id, baseUrl: \"\" });\r\n    if (delDoc.photo !== constant.PHOTO_URL + \"noimage\") {\r\n        let photo_id = delDoc.photo.substr(constant.PHOTO_URL.length);\r\n        console.log(photo_id)\r\n        await Photo.deleteOne({ _id: photo_id });\r\n    }\r\n\r\n    let doc = await Contact.deleteOne({ _id:_id });\r\n    if (doc.ok === 1 && doc.n === 1) {\r\n        return { status:\"ok\", message:\"삭제 성공\", _id:_id };\r\n    } else {\r\n        return { status:\"fail\", message:\"삭제 실패\" };\r\n    }\r\n}\r\n\r\nconst streamToBuffer = async (stream) => {  \r\n    return new Promise((resolve, reject) => {\r\n        let buffers = [];\r\n        stream.on('error', reject);\r\n        stream.on('data', (data) => buffers.push(data));\r\n        stream.on('end', () => resolve(Buffer.concat(buffers)));\r\n    });\r\n}  \r\n\r\nconst storeImageToDB = async ({stream, mimetype}) => {\r\n    let photo = new Photo();\r\n    photo._id = shortid.generate();\r\n    photo.image = await streamToBuffer(stream);\r\n    photo.mimetype = mimetype;\r\n    await photo.save();\r\n    return photo._id;\r\n}\r\n\r\nexport const changePhoto = async (_id, upload)=> {\r\n    const { stream, mimetype } = await upload;\r\n    if (!mimetype.startsWith(\"image/\")) {\r\n        return { status:\"fail\", message:\"이미지만 업로드 가능합니다.\" };\r\n    }\r\n    //기존 이미지 삭제(noimage가 아닐 경우만)\r\n    let doc = await contactOne({ _id, baseUrl: \"\" });\r\n    console.log(doc.photo)\r\n    if (doc.photo !== constant.PHOTO_URL + \"noimage\") {\r\n        let photo_id = doc.photo.substr(constant.PHOTO_URL.length);\r\n        await Photo.deleteOne({ _id: photo_id });\r\n    }\r\n\r\n    const photo_id = await storeImageToDB({ stream, mimetype })\r\n\r\n    let updatedDoc = await Contact.updateOne({ _id: _id }, { photo: photo_id })\r\n    if (updatedDoc.ok === 1 && updatedDoc.n === 1) {\r\n        return { status:\"ok\", message: `사진 변경 성공 => photo_id : ${photo_id})`, _id:_id };\r\n    } else {\r\n        return { status:\"fail\", message:\"사진 변경 실패\" };\r\n    }\r\n}\r\n\r\n"]}