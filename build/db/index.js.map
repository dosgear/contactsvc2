{"version":3,"sources":["../../src/db/index.js"],"names":["contactOne","no","baseUrl","doc","Contact","findById","photo","constant","PHOTO_URL","status","message","contactsAll","pageno","pagesize","contacts","find","sort","_id","skip","limit","map","c","index","name","tel","address","count","countDocuments","totalcount","searchContact","RegExp","insertContact","ObjectId","toHexString","c1","save","batchInsertContacts","result","i","length","push","e","updateContact","updateOne","ok","n","deleteContact","delDoc","photo_id","substr","Photo","deleteOne","streamToBuffer","stream","Promise","resolve","reject","buffers","on","data","Buffer","concat","getPhotoImage","findOne","storeImageToDB","buf","mimetype","shortid","generate","image","changePhoto","startsWith","console","log","updatedDoc"],"mappings":"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","file":"index.js","sourcesContent":["import { ObjectId } from 'mongodb'\nimport { Contact, Photo, mongoose } from './testdb';\nimport constant from '../constant';\nimport shortid from 'shortid';\n\nexport const contactOne = async ({ no, baseUrl }) => {\n    if (typeof(no) !== \"string\" && no == \"\") no = \"not passed\";\n    let doc = await Contact.findById(no);\n    if (doc) { \n        doc.photo = baseUrl + constant.PHOTO_URL + doc.photo;\n        return doc; \n    }\n    return { status:\"fail\", message:\"연락처 정보 없음\"  };\n}\n\nexport const contactsAll = async ({ pageno, pagesize, baseUrl }) => {\n    if (typeof(pageno) !== \"number\" || pageno < 0) pageno = 0;\n    if (typeof(pagesize) !== \"number\") pagesize = 5;\n    let contacts;\n    if (pageno === 0) {\n        pagesize=0;\n        contacts = await Contact.find().sort({ _id: -1 });\n    } else {\n        contacts = await Contact.find().sort({ _id: -1 }).skip((pageno-1)*pagesize).limit(pagesize);\n    }\n    contacts = contacts.map((c,index)=> {\n        let { _id, name, tel, address, photo } = c;\n        return { no:_id, name, tel, address, photo: baseUrl + constant.PHOTO_URL + photo }\n    })\n    let count = await Contact.countDocuments();\n    return { pageno, pagesize, totalcount:count, contacts };\n}\n\nexport const searchContact = async({ name, baseUrl }) => {\n    let contacts = await Contact.find({ name: new RegExp(name, \"i\")}).sort({name:1});\n    contacts = contacts.map((c,index)=> {\n        let { _id, name, tel, address, photo } = c;\n        return { no:_id, name, tel, address, photo: baseUrl + constant.PHOTO_URL + photo }\n    })\n    return contacts;\n}\n\nexport const insertContact = async ({ name, tel, address, photo }) => {\n    if (typeof(photo) === \"undefined\" || photo == null) {\n        photo = 'noimage';\n    }\n    let _id = new ObjectId().toHexString();\n    let c1 = new Contact({\n        _id, name, tel, address, photo\n    })\n    let doc = await c1.save()\n    if (doc)\n        return { status: \"success\", message:\"연락처 추가 성공\", no: doc._id };\n    else\n        return { status: \"fail\", message:\"연락처 추가 실패\" };\n} \n\nexport const batchInsertContacts = async({ contacts }) => {\n    const result  = { status : \"\", message: \"\", no : [] };\n    let count = 0;\n    try {\n        for (let i=0; i < contacts.length; i++) {\n            let { name, tel, address } = contacts[i];\n            let doc = await insertContact({ name, tel, address });\n            if (doc.status === \"ok\") {\n                result.no.push(doc.no);\n                count++;\n            }\n        }\n        result.status = \"success\";\n        result.message = count + \"건의 데이터 추가 성공\";\n        return result;\n    } catch(e) {\n        result.status = \"fail\";\n        result.message = \"배치 추가 실패\";\n        delete result.no;\n    }\n}\n\nexport const updateContact = async ({ no, name, tel, address }) => {\n    if (typeof(no) === \"undefined\") {\n        return { status: \"fail\", message:\"no 필드는 반드시 전달해야 합니다.\" };\n    }\n    let doc = await Contact.updateOne({ _id: no }, { name, tel, address })\n    if (doc.ok === 1 && doc.n === 1) {\n        return { status:\"success\", message:\"업데이트 성공\", no:no };\n    } else {\n        return { status:\"fail\", message:\"업데이트 실패\" };\n    }\n}\n\nexport const deleteContact = async ({ no }) => {\n    if (typeof(no) === \"undefined\") {\n        return { status: \"fail\", message:\"no 필드는 반드시 전달해야 합니다.\" };\n    }\n    let delDoc = await contactOne({ no:no, baseUrl: \"\" });\n    if (delDoc.photo !== constant.PHOTO_URL + \"noimage\") {\n        let photo_id = delDoc.photo.substr(constant.PHOTO_URL.length);\n        await Photo.deleteOne({ _id: photo_id });\n    }\n    let doc = await Contact.deleteOne({ _id:no });\n    if (doc.ok === 1 && doc.n === 1) {\n        return { status:\"success\", message:\"삭제 성공\", no:no };\n    } else {\n        return { status:\"fail\", message:\"삭제 실패\" };\n    }\n}\n\nconst streamToBuffer = async (stream) => {  \n    return new Promise((resolve, reject) => {\n        let buffers = [];\n        stream.on('error', reject);\n        stream.on('data', (data) => buffers.push(data));\n        stream.on('end', () => resolve(Buffer.concat(buffers)));\n    });\n}  \n\nexport const getPhotoImage = async ({ no }) => {\n    let doc = await Photo.findOne({ _id: no });\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\nconst storeImageToDB = async ({buf, mimetype}) => {\n    let photo = new Photo();\n    photo._id = shortid.generate();\n    photo.image = buf;\n    photo.mimetype = mimetype;\n    await photo.save();\n    return photo._id;\n}\n\n\nexport const changePhoto = async ({no, buf, mimetype})=> {\n    if (!mimetype.startsWith(\"image/\")) {\n        return { status:\"fail\", message:\"이미지만 업로드 가능합니다.\" };\n    }\n    //기존 이미지 삭제(noimage가 아닐 경우만)\n    let doc = await contactOne({ no:no, baseUrl: \"\" });\n    console.log(doc.photo)\n    console.log(constant.PHOTO_URL + \"noimage\")\n    if (doc.photo !== constant.PHOTO_URL + \"noimage\") {\n        let photo_id = doc.photo.substr(constant.PHOTO_URL.length);\n        await Photo.deleteOne({ _id: photo_id });\n    }\n    const photo_id = await storeImageToDB({ buf, mimetype })\n\n    let updatedDoc = await Contact.updateOne({ _id: no }, { photo: photo_id })\n    if (updatedDoc.ok === 1 && updatedDoc.n === 1) {\n        return { status:\"success\", message: `사진 변경 성공 => photo_id : ${photo_id}`, no:no };\n    } else {\n        return { status:\"fail\", message:\"사진 변경 실패\" };\n    }\n}"]}