{"version":3,"sources":["../src/server.js"],"names":["app","use","enable","baseDir","path","resolve","logDirectory","join","fs","existsSync","mkdirSync","accessLogStream","interval","stream","set","process","env","PORT","express","static","console","log","engine","require","renderFile","bodyParser","json","urlencoded","extended","req","res","next","header","server","listen","get"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,MAAM,wBAAZ;;AAEAA,IAAIC,GAAJ,CAAQ,qBAAR;AACAD,IAAIE,MAAJ,CAAW,gBAAX,E,CAAgC;AAChC;AACA,IAAIC,UAAUC,eAAKC,OAAL,CAAa,GAAb,CAAd;;AAEA,MAAMC,eAAeF,eAAKG,IAAL,CAAUJ,OAAV,EAAmB,MAAnB,CAArB;AACAK,aAAGC,UAAH,CAAcH,YAAd,KAA+BE,aAAGE,SAAH,CAAaJ,YAAb,CAA/B;AACA,IAAIK,kBAAkB,kCAAI,YAAJ,EAAkB;AACtCC,cAAU,IAD4B,EACtB;AAChBR,UAAME;AAFgC,CAAlB,CAAtB;AAIAN,IAAIC,GAAJ,CAAQ,oBAAO,UAAP,EAAmB,EAACY,QAAQF,eAAT,EAAnB,CAAR;;AAEAX,IAAIc,GAAJ,CAAQ,MAAR,EAAiBC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAArC;;AAEAjB,IAAIC,GAAJ,CAAQiB,kBAAQC,MAAR,CAAehB,UAAU,SAAzB,CAAR;AACAiB,QAAQC,GAAR,CAAYlB,UAAU,QAAtB;AACAH,IAAIc,GAAJ,CAAQ,OAAR,EAAiBX,UAAU,QAA3B;AACAH,IAAIc,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AACAd,IAAIsB,MAAJ,CAAW,MAAX,EAAmBC,QAAQ,KAAR,EAAeC,UAAlC;AACAxB,IAAIC,GAAJ,CAAQwB,qBAAWC,IAAX,EAAR;AACA1B,IAAIC,GAAJ,CAAQwB,qBAAWE,UAAX,CAAsB;AAC5BC,cAAU;AADkB,CAAtB,CAAR;AAGA5B,IAAIC,GAAJ,CAAQ,UAAU4B,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAC9BD,QAAIE,MAAJ,CAAW,eAAX,EAA4B,8CAA5B;AACAF,QAAIE,MAAJ,CAAW,SAAX,EAAsB,IAAtB;AACAF,QAAIE,MAAJ,CAAW,QAAX,EAAqB,UAArB;AACAD;AACH,CALD;;AAOA,sBAAO/B,GAAP;;AAEA,MAAMiC,SAASjC,IAAIkC,MAAJ,CAAWlC,IAAImC,GAAJ,CAAQ,MAAR,CAAX,EAA4B,YAAW;AAClDf,YAAQC,GAAR,CAAY,cAAcrB,IAAImC,GAAJ,CAAQ,MAAR,CAAd,GAAgC,iBAA5C;AACH,CAFc,CAAf","file":"server.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\nimport morgan from 'cors';\nimport path from 'path';\nimport fs from 'fs';\nimport rfs from 'rotating-file-stream';\nimport routes from './routes';\n\nconst app = express();\n\napp.use(cors());\napp.enable(\"jsonp callback\");   //jsonp 지원\n//-- 로깅\nvar baseDir = path.resolve('.');\n\nconst logDirectory = path.join(baseDir, '/log')\nfs.existsSync(logDirectory) || fs.mkdirSync(logDirectory)\nvar accessLogStream = rfs('access.log', {\n  interval: '1d', // 매일 매일 로그 파일 생성\n  path: logDirectory\n})\napp.use(morgan('combined', {stream: accessLogStream}))\n\napp.set('port', (process.env.PORT || 3000));\n\napp.use(express.static(baseDir + '/public'));\nconsole.log(baseDir + '/views');\napp.set('views', baseDir + '/views');\napp.set('view engine', 'ejs');\napp.engine('html', require('ejs').renderFile);\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(function (req, res, next) {\n    res.header('Cache-Control', 'private, no-cache, no-store, must-revalidate');\n    res.header('Expires', '-1');\n    res.header('Pragma', 'no-cache');\n    next()\n});\n\nroutes(app);\n\nconst server = app.listen(app.get('port'), function() {\n    console.log(\"연락처 서비스가 \" + app.get('port') + \"번 포트에서 시작되었습니다!\");\n});\n\n\n\n"]}