{"version":3,"sources":["../../src/init/initializeData.js"],"names":["Contact","Photo","mongoose","fs","shortid","ObjectId","imageFilePath","firstNames","arrfNames","split","lastNames","arrlNames","initialize","deleteMany","noimage_photo","_id","image","readFileSync","mimetype","save","i","photo","generate","num","ridx","Math","floor","random","length","name","tel","address","toHexString","c1","connection","close","console","log"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,KAAlB,EAAyBC,QAAzB,QAAyC,iBAAzC;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,QAAT,QAAyB,SAAzB;;AAEA,MAAMC,gBAAgB,cAAtB;;AAEA,IAAIC,aAAY,moBAAhB;AACA,IAAIC,YAAYD,WAAWE,KAAX,CAAiB,GAAjB,CAAhB;AACA,IAAIC,YAAY,+lBAAhB;AACA,IAAIC,YAAYD,UAAUD,KAAV,CAAgB,GAAhB,CAAhB;;AAEA,MAAMG,aAAa,YAAY;AAC3B;AACA,UAAMZ,QAAQa,UAAR,EAAN;AACA,UAAMZ,MAAMY,UAAN,EAAN;AACA;AACA,QAAIC,gBAAgB,IAAIb,KAAJ,EAApB;AACAa,kBAAcC,GAAd,GAAoB,SAApB;AACAD,kBAAcE,KAAd,GAAsBb,GAAGc,YAAH,CAAgBX,gBAAgB,aAAhC,CAAtB;AACAQ,kBAAcI,QAAd,GAAyB,YAAzB;AACA,UAAMJ,cAAcK,IAAd,EAAN;;AAEA,SAAK,IAAIC,IAAE,CAAX,EAAcA,KAAK,GAAnB,EAAwBA,GAAxB,EAA6B;AACzB;AACA,YAAIC,QAAQ,IAAIpB,KAAJ,EAAZ;AACAoB,cAAMN,GAAN,GAAYX,QAAQkB,QAAR,EAAZ;AACAD,cAAML,KAAN,GAAcb,GAAGc,YAAH,CAAgBX,gBAAgBc,CAAhB,GAAoB,MAApC,CAAd;AACAC,cAAMH,QAAN,GAAiB,YAAjB;AACA,cAAMG,MAAMF,IAAN,EAAN;;AAEA,YAAII,MAAI,KAAGH,CAAX;AACA,YAAIA,IAAI,EAAR,EAAYG,MAAM,MAAIH,CAAV;AACZ,YAAII,OAAOC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBhB,UAAUiB,MAArC,CAAX;AACA,YAAIC,OAAOrB,UAAUY,IAAE,CAAZ,IAAiB,GAAjB,GAAuBT,UAAUa,IAAV,CAAlC;AACA,YAAIM,MAAM,gBAAcP,GAAxB;AACA,YAAIQ,UAAQ,KAAZ;AACA,YAAIhB,MAAM,IAAIV,QAAJ,GAAe2B,WAAf,EAAV;AACA,YAAIC,KAAK,IAAIjC,OAAJ,CAAY,EAAEe,GAAF,EAAOc,IAAP,EAAaC,GAAb,EAAkBC,OAAlB,EAA2BV,OAAMA,MAAMN,GAAvC,EAAZ,CAAT;AACA,cAAMkB,GAAGd,IAAH,EAAN;AACH;AACDjB,aAASgC,UAAT,CAAoBC,KAApB;AACAC,YAAQC,GAAR,CAAY,oBAAZ;AACH,CA/BD;;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAzB","file":"initializeData.js","sourcesContent":["import { Contact, Photo, mongoose } from '../db/contactdb';\r\nimport fs from 'fs';\r\nimport shortid from 'shortid';\r\nimport { ObjectId } from 'mongodb'\r\n\r\nconst imageFilePath = \"temp_photow/\";\r\n\r\nlet firstNames= \"Kel,Morgan,Amari,Akiyama,Quan,Ariana,Rana,Carrie,London,Shelley,Hailey,Stella,Aki,Sun,Leigh,Maya,Jermyn,Kim,Lauren,Koryne,Fanny,Maima,Nahid,Khalea,Rachel,Maired,Sa,Serin,Blake,Drew,Lina,Priyal,Megan,Bailey,Amaya,Kaelyn,Charlotte,Korra,Kassie,Keeta,Mallie,Noel,Tracy,Kace,Killion,Kenyatta,Pita,Raye,Sadie,Evon,Addison,Arrietty,Engel,Feron,Courtney,Tonya,Landon,Mila,Nade,Gladys,Sean,Rhu,Rosebud,Sophie,Zari,Rose,Jain,Harper,Lai,Kelley,Lyanne,Le,Nivea,Penelope,Remy,Sophia,Ray,Rai,Amoni,Zoe,Kylie,Zenon,Alania,Aveen,Annabelle,Caroline,Emani,Catera,Lin,Francess,Isabella,Victoria,Isabelle,Ambrosia,Jennifer,Jesse,Kalisa,Katchi,Katherine,Keandra\"\r\nlet arrfNames = firstNames.split(',');\r\nlet lastNames = \"Anderson,Allen,Adams,Brown,Baker,Bailey,Bell,Brooks,Bennett,Butler,Barnes,Clark,Campbell,Carter,Collins,Cook,Cooper,Cox,Cruz,Davis,Díaz,Evans,Edwards,Flores,Foster,Fisher,Harris,Hall,Hill,Howard,Hughes,Johnson,Jones,Jackson,James,Jenkins,Gray,King,Miller,Martinez,Moore,Martin,Mitchell,Morris,Murphy,Morgan,Myers,Morales,Nelson,Nguyen,Ortiz,Lee,Lewis,Long,Phillips,Parker,Peterson,Price,Powell,Perry,Robinson,Ramirez,Roberts,Rivera,Rogers,Reed,Richardson,Reyes,Ross,Russell,Smith,Scott,Stewart,Sanders,Sullivan,Taylor,Thomas,Thompson,Turner,Torres,Williams,Wilson,White,Walker,Wright,Ward,Wood,Watso,Young\";\r\nlet arrlNames = lastNames.split(',');\r\n\r\nconst initialize = async () => {\r\n    //기존 데이터 삭제\r\n    await Contact.deleteMany()\r\n    await Photo.deleteMany()\r\n    //사진 없음일 때 사용할 레고이미지 추가\r\n    let noimage_photo = new Photo();\r\n    noimage_photo._id = \"noimage\";\r\n    noimage_photo.image = fs.readFileSync(imageFilePath + \"noimage.jpg\");\r\n    noimage_photo.mimetype = \"image/jpeg\";\r\n    await noimage_photo.save();\r\n\r\n    for (let i=1; i <= 100; i++) {\r\n        //사진 저장 후 연락처 저장\r\n        let photo = new Photo();\r\n        photo._id = shortid.generate();\r\n        photo.image = fs.readFileSync(imageFilePath + i + \".jpg\");\r\n        photo.mimetype = \"image/jpeg\";\r\n        await photo.save();\r\n\r\n        let num=\"\"+i;\r\n        if (i < 10) num = \"0\"+i;\r\n        let ridx = Math.floor(Math.random() * arrlNames.length);\r\n        let name = arrfNames[i-1] + \" \" + arrlNames[ridx]\r\n        let tel = \"010-3456-82\"+num;\r\n        let address=\"서울시\";\r\n        let _id = new ObjectId().toHexString();\r\n        let c1 = new Contact({ _id, name, tel, address, photo:photo._id });\r\n        await c1.save();\r\n    }\r\n    mongoose.connection.close();\r\n    console.log(\"Connection Close!!\")\r\n}\r\n\r\n// const initialize = async () => {\r\n//     await removeCollection();\r\n//     await del(['public/photos/*']);\r\n//     await cpFile(`temp_photow/noimage.jpg`, `${constant.SAVE_PHOTO_DIR}/noimage.jpg`);\r\n//     for (let i=1; i <= 100; i++) {\r\n//         await cpFile(`temp_photow/${i}.jpg`, `${constant.SAVE_PHOTO_DIR}/${i}.jpg`);\r\n//         let photo = `${constant.PHOTO_URL}/${i}.jpg`;\r\n//         let num=\"\"+i;\r\n//         if (i < 10) num = \"0\"+i;\r\n//         let ridx = Math.floor(Math.random() * arrlNames.length);\r\n//         let name = arrfNames[i-1] + \" \" + arrlNames[ridx]\r\n//         let tel = \"010-3456-82\"+num;\r\n//         let address=\"서울시\";\r\n//         let doc = await insertContact({ name, tel, address, photo })\r\n//     }\r\n//     closeConnection();\r\n// }\r\n\r\ninitialize();"]}